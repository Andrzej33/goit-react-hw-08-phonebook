{"version":3,"file":"static/js/12.cc3fde50.chunk.js","mappings":"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","sources":["components/ContactForm/Form.styled.jsx","components/ContactForm/ContactForm.jsx","components/EditForm/EditForm.jsx","components/ContactModal/ContactModal.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Title/Title.styled.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormOfContacts,ErrorMessage as FormikError } from 'formik';\n\nexport const Form = styled(FormOfContacts)`\n  display: flex;\n  flex-direction: column;\n  max-width: 500px;\n  margin: 0 auto;\n\n  label {\n    padding-left: 20px;\nmargin-bottom: 10px;\n    display: block;\n    font-size: 18px;\n    color: #666;\n   \n    cursor: pointer;\n  }\n\n  input {\n    background: #ecf0f3;\n    padding: 10px;\n    padding-left: 20px;\n    height: 40px;\n    font-size: 20px;\n    border-radius: 50px;\n    box-shadow: inset 6px 6px 6px #cbced1, inset -6px -6px 6px white;\n    border: 1px solid #999;\n    outline: none;\n    margin-bottom: 15px;\n\n    &:focus {\n      border-color: #ff6f00;\n    }\n  }\n\n  button {\n    // margin-top: 30px;\n    font-size: 16px;\n    max-width: 170px;\n    margin: 0 auto;\n    padding: 10px 20px;\n    border-radius: 20px;\n    background-color: #ff6f00;\n    color: white;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    display: inline-block;\n    cursor: pointer;\n    margin-top: 20px;\n    transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover,\n    &:focus {\n      background: darken(#ff6f00, 5%);\n      border: 1px solid rgba(255, 255, 255, 0.6);\n      box-shadow: 0px 10px 15px -6px rgba(88, 85, 85, 0.2);\n    }\n  }\n`;\n\n\nexport const ErrorMessage = styled(FormikError)`\nmargin-bottom: 20px;\n  font-size: 14px;\n  padding-left: 20px;\n  color:red;\n  /* color: {p => p.theme.color.accent} */\n`","import { Formik, Field } from 'formik';\nimport { Form, ErrorMessage } from './Form.styled';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'Redux/selectors';\nimport { addContact } from 'Redux/operations';\n\n// const  phoneRegEx = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nconst ContactsSchema = Yup.object().shape({\n  name: Yup.string().required('Required field'),\n  number: Yup.number()\n    //  .max(12,'this number must be less longer then 12 symbols')\n    .typeError(\"That doesn't look like a phone number\")\n    .positive(\"A phone number can't start with a minus\")\n    .integer(\"A phone number can't include a decimal point\")\n    .required('Required field'),\n});\n\nexport const ContactForm = () => {\n  const { items } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    if (\n      items.find(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      alert(`${values.name} is already in contacts`);\n      return;\n    }\n    if (items.find(contact => contact.number === values.number)) {\n      alert(`${values.number} is already exist in contacts`);\n      return;\n    }\n    // {\n    //   const newValues = { name: values.name, phone: values.number };\n\n    //   dispatch(addContact(newValues));\n    // }\ndispatch(addContact(values))\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={ContactsSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <label>Name </label>\n        <Field name=\"name\" />\n        <ErrorMessage name=\"name\" component=\"span\" />\n        <label>Number</label>\n        <Field type=\"tel\" name=\"number\" />\n        <ErrorMessage name=\"number\" component=\"span\" />\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n","import { Form } from 'components/ContactForm/Form.styled';\nimport { Formik, Field } from 'formik';\n\n\nimport { useDispatch } from 'react-redux';\n// import { selectContacts } from 'Redux/selectors';\nimport { editContact } from 'Redux/operations';\n// import { useState } from 'react'\n\n\n\nexport const EditForm = ({id,name,number}) => {\n//   const { items } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n//   const [contactName, setContactName] = useState(name)\n//     const [contactNumber, setContactNumber] = useState(number)\n\n  const handleSubmit = (values, actions) => {\n    // if (\n    //   items.find(\n    //     contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    //   )\n    // ) {\n    //   alert(`${values.name} is already in contacts`);\n    //   return;\n    // }\n    // if (items.find(contact => contact.number === values.number)) {\n    //   alert(`${values.number} is already exist in contacts`);\n    //   return;\n    // }\n    // {\n    //   const newValues = { name: values.name, phone: values.number };\n\n    //   dispatch(addContact(newValues));\n    // }\n   \ndispatch(editContact(id,values))\n    // actions.resetForm();\n  };\n\n  const showName = () => {\n    console.log(id);\n  }\n\n  return (\n    <Formik\n      initialValues={{\n        \n        name: name,\n        number: number,\n      }}\n      \n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <label>Name </label>\n        <Field name=\"name\" />\n        {/* <ErrorMessage name=\"name\" component=\"span\" /> */}\n        <label>Number</label>\n        <Field type=\"tel\" name=\"number\" />\n        {/* <ErrorMessage name=\"number\" component=\"span\" /> */}\n        <button type=\"submit\">Edit contact</button>\n        <button type=\"button\" onClick={showName}>name</button>\n      </Form>\n    </Formik>\n  );\n};\n","import {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    Button,\n  } from '@chakra-ui/react'\n  import { useDisclosure } from '@chakra-ui/react'\nimport { EditForm } from 'components/EditForm/EditForm'\n\n\n  export const ContactModal = ({id,name,number}) => {\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    // const [contactName, setContactName] = useState(name)\n    // const [contactNumber, setContactNumber] = useState(number)\n    // const handleNameChange = (event) => setContactName(event.target.value);\n    // const handleNumberChange = (event) => setContactNumber(event.target.value);\n    const onCloseModal = () => {\n\n        onClose();\n\n    }\n    return (\n      <>\n        <Button onClick={onOpen}>edit</Button>\n  \n        <Modal isOpen={isOpen} onClose={onCloseModal}>\n          <ModalOverlay />\n          <ModalContent>\n            <ModalHeader>Modal Title</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n            <EditForm id={id} name={name} number={number}/>\n      {/* <Input value={contactName} variant='filled' onChange={handleNameChange} />\n      <Input value={contactNumber} variant='filled' onChange={handleNumberChange} /> */}\n            </ModalBody>\n  \n            <ModalFooter>\n              <Button colorScheme='blue' mr={3} onClick={onClose}>\n                Close\n              </Button>\n              <Button variant='ghost'>Edit Contact</Button>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n      </>\n    )\n  }","import { deleteContact } from 'Redux/operations';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { ContactModal } from 'components/ContactModal/ContactModal';\n\nexport const ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  \n  return (\n    <>\n      <p>\n        {name}: <span>{number}</span>\n      </p>\n      {/* <Button type=\"button\" onClick={onOpen}\n      // //  onClick={() => dispatch(deleteContact(id))}\n      //  >\n        edit\n      </Button> */}\n      <ContactModal id={id} name={name} number={number}/>\n      <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        delete\n      </button>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ListOfContacts = styled.ul`\n  padding-left: 10px;\n  counter-reset: li;\n  /* max-width: 550px;\n  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5); */\n  text-shadow: 0 1px 0 rgba(255,255,255,.5);\n  li {\n    /* background-color: #111111; */\n    display: flex;\n    justify-content: space-between;\n    /* padding-bottom: 20px; */\n    background: #DAD2CA;\n  color: #444;\n  border-radius: .3em;\n  transition: .3s ease-out;\n  &:hover{background: #E9E4E0;}\n\n  p {\n      text-transform: capitalize;\n      /* color: rgb(30 17 226); */\n      \n      font-size: 24px;\n      position: relative;\n  display: block;\n  padding: .4em .4em .4em 2em;\n  margin: .5em 0;\n  \n  /* text-decoration: none; */\n}\n  button {\n      --c: #fff;\nmin-width: 80px;\n/* height: 80%; */\n      background: linear-gradient(90deg, #0000 33%, #fff5, #0000 67%)\n          var(--_p, 100%) / 300% no-repeat,\n        #e97f02;\n        cursor: pointer;\n      color: #0000;\n      border: none;\n      transform: perspective(500px) rotateY(calc(20deg * var(--_i, -1)));\n      text-shadow: calc(var(--_i, -1) * 0.08em) -0.01em 0 var(--c),\n        calc(var(--_i, -1) * -0.08em) 0.01em 2px #0004;\n      outline-offset: 0.1em;\n      transition: 0.3s;\n      &:hover,\n      &:focus-visible {\n        --_p: 0%;\n        --_i: 1;\n      }\n    }\n    }\n  \n\n  li:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n","import { ContactItem } from '../ContactItem/ContactItem';\nimport { useEffect } from 'react';\nimport { ListOfContacts } from './ContactList.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectFilteredContacts } from 'Redux/selectors';\nimport { fetchContacts } from 'Redux/operations';\nimport { ThreeDots } from 'react-loader-spinner';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const { isLoading, error } = useSelector(selectContacts);\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ListOfContacts>\n      {isLoading && <ThreeDots color=\"darkblue\" />}\n      {error && <b>{error}</b>}\n      {filteredContacts.length !== 0 ? (\n        filteredContacts.map(contact => {\n          return (\n            <li key={contact.id}>\n              <ContactItem contact={contact} />\n            </li>\n          );\n        })\n      ) : (\n        <h3 style={{ paddingLeft: '40px' }}>\n          There are no apropriate contacts\n        </h3>\n      )}\n    </ListOfContacts>\n  );\n};\n","import styled from \"styled-components\"; \n\nexport const FilterBox = styled.div`\n    display: flex;\n    gap: 20px;\n    padding-left: 40px;\n    align-items: center;\nmargin-bottom: 20px;\n    input{\n        background: #ecf0f3;\n  padding: 10px;\n  padding-left: 20px;\n  height: 36px;\n  font-size: 16px;\n  border-radius: 40px;\n  box-shadow: inset 6px 6px 6px #cbced1, inset -6px -6px 6px white;\n  border: 1px solid #999;\n  outline: none;\n    }\nlabel{\n    color: brown;\n    font-size: 24px;\n    font-weight: bold;\n}\n`","import { FilterBox } from './Filter.styled';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { show } from 'Redux/filterSlice';\nimport { selectFilter } from 'Redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const onChange = e => {\n    const filterValue = e.currentTarget.value.trim();\n    dispatch(show(filterValue));\n  };\n\n  const filterValue = useSelector(selectFilter);\n  return (\n    <FilterBox>\n      <label htmlFor=\"\">Find contacts by name</label>\n      <input type=\"text\" value={filterValue} onChange={onChange} />\n    </FilterBox>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  font-size: 38px;\n  letter-spacing: 0.1em;\n  text-align: center;\n  color: darkblue;\n`;\n","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { Title } from \"components/Title/Title.styled\";\n\nconst ContactsPage = () => {\n\n   return (\n    <>\n    <ContactForm/>\n    <Title>Contacts</Title>\n    <Filter/>\n    <ContactList/>\n    </>\n   )\n    \n}\n\n\nexport default ContactsPage;"],"names":["Form","styled","FormOfContacts","ErrorMessage","FormikError","ContactsSchema","Yup","shape","name","required","number","typeError","positive","integer","ContactForm","items","useSelector","selectContacts","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","find","contact","toLowerCase","alert","addContact","resetForm","component","type","EditForm","id","editContact","onClick","console","log","ContactModal","useDisclosure","isOpen","onOpen","onClose","colorScheme","mr","variant","ContactItem","deleteContact","ListOfContacts","ContactList","isLoading","error","filteredContacts","selectFilteredContacts","useEffect","fetchContacts","color","length","map","style","paddingLeft","FilterBox","Filter","filterValue","selectFilter","htmlFor","value","onChange","e","currentTarget","trim","show","Title"],"sourceRoot":""}