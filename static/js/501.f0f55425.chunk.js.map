{"version":3,"file":"static/js/501.f0f55425.chunk.js","mappings":"mOAGaA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,4xCAgEJE,GAAeF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,kJ,uHCnDZI,EAAY,WAGrB,IAAMC,GAAWC,EAAAA,EAAAA,MAsBjB,OACA,SAAC,KAAD,CACEC,cAAe,CACbC,MAAO,GACPC,SAAS,IAGXC,SA3BmB,SAACC,EAAQC,GAgB5BP,GAASQ,EAAAA,EAAAA,IAAMF,IACfC,EAAQE,WACT,EAGD,UAQE,UAAC,IAAD,YACE,sCACA,SAAC,KAAD,CAAOC,KAAK,WACZ,SAAC,IAAD,CAAcA,KAAK,QAAQC,UAAU,UACrC,yCACA,SAAC,KAAD,CAAOC,KAAK,WAAWF,KAAK,cAC5B,SAAC,IAAD,CAAcA,KAAK,WAAWC,UAAU,UACxC,mBAAQC,KAAK,SAAb,uBAIP,ECjDD,EATkB,WAEf,OACA,SAACb,EAAD,GAGF,C","sources":["components/ContactForm/Form.styled.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormOfContacts,ErrorMessage as FormikError } from 'formik';\n\nexport const Form = styled(FormOfContacts)`\n  display: flex;\n  flex-direction: column;\n  max-width: 500px;\n  margin: 0 auto;\n  padding: 20px;\n  border: solid #ff6f00 2px;\n  border-radius: 10px;\n\n  label {\n    padding-left: 20px;\nmargin-bottom: 10px;\n    display: block;\n    font-size: 18px;\n    color: #666;\n   \n    cursor: pointer;\n  }\n\n  input {\n    background: #ecf0f3;\n    padding: 10px;\n    padding-left: 20px;\n    height: 40px;\n    font-size: 20px;\n    border-radius: 50px;\n    box-shadow: inset 6px 6px 6px #cbced1, inset -6px -6px 6px white;\n    border: 1px solid #999;\n    outline: none;\n    margin-bottom: 15px;\n\n    &:focus {\n      border-color: #ff6f00;\n    }\n  }\n\n  button {\n    // margin-top: 30px;\n    font-size: 16px;\n    max-width: 170px;\n    margin: 0 auto;\n    padding: 10px 20px;\n    border-radius: 20px;\n    border: solid transparent 1px;\n    background-color: #ff6f00;\n    color: white;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    display: inline-block;\n    cursor: pointer;\n    margin-top: 20px;\n    transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover,\n    &:focus {\n      border: solid #ff6f00 1px;\n      background-color: #fff;\ncolor: #ff6f00;\n      box-shadow: 0px 10px 15px -6px rgba(88, 85, 85, 0.2);\n    }\n  }\n`;\n\n\nexport const ErrorMessage = styled(FormikError)`\nmargin-bottom: 20px;\n  font-size: 14px;\n  padding-left: 20px;\n  color:red;\n  /* color: {p => p.theme.color.accent} */\n`","import { Formik, Field } from 'formik';\nimport { Form, ErrorMessage } from 'components/ContactForm/Form.styled';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'Redux/operations';\n// import * as Yup from 'yup';\n\n// const ContactsSchema = Yup.object().shape({\n//     name: Yup.string().required('Required field'),\n//     password: Yup.string().min(8, 'must be at least 8 characters long').required('Required field')\n//       //  .max(12,'this number must be less longer then 12 symbols')\n//       .typeError(\"That doesn't look like a password\")\n//       .positive(\"A password can't start with a minus\")\n//       .integer(\"A password can't include a decimal point\")\n//       .required('Required field'),\n//   });\n\nexport const LoginForm = () => {\n\n    // const { items } = useSelector(selectContacts);\n    const dispatch = useDispatch();\n  \n    const handleSubmit = (values, actions) => {\n//       if (\n//         items.find(\n//           contact => contact.name.toLowerCase() === values.name.toLowerCase()\n//         )\n//       ) {\n//         alert(`${values.name} is already in contacts`);\n//         return;\n//       }\n//       if (items.find(contact => contact.number === values.number)) {\n//         alert(`${values.number} is already exist in contacts`);\n//         return;\n//       }\n//       {\n//         const newValues = { name: values.name, phone: values.number };\n//  }\n      dispatch(login(values));\n      actions.resetForm();\n    };\n\n    return (\n    <Formik\n      initialValues={{\n        email: '',\n        password:'',\n      }}\n      // validationSchema={ContactsSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <label>Email</label>\n        <Field name=\"email\" />\n        <ErrorMessage name=\"email\" component=\"span\" />\n        <label>Password</label>\n        <Field type=\"password\" name=\"password\" />\n        <ErrorMessage name=\"password\" component=\"span\" />\n        <button type=\"submit\">Login</button>\n      </Form>\n    </Formik>\n  ); \n}","import { LoginForm } from \"components/LoginForm/LoginForm\";\n\n\nconst LoginPage = () => {\n\n   return(\n   <LoginForm/>\n   )\n    \n}\n\n\nexport default LoginPage;"],"names":["Form","styled","FormOfContacts","ErrorMessage","FormikError","LoginForm","dispatch","useDispatch","initialValues","email","password","onSubmit","values","actions","login","resetForm","name","component","type"],"sourceRoot":""}